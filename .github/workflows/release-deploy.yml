# This workflow will upload a Python Package using Poetry when a new release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Publish Python Package

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
    - name: Mint a token for PyPI
      id: token_mint
      shell: bash
      # This code was taken from tschm/token-mint-action
      run: |
        echo "Checking the required environment variables"
        env_vars_found=true
        if [[ -z $ACTIONS_ID_TOKEN_REQUEST_TOKEN ]]; then
          echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN is not defined."
          env_vars_found=false
        fi

        if [[ -z $ACTIONS_ID_TOKEN_REQUEST_URL ]]; then
          echo "ACTIONS_ID_TOKEN_REQUEST_URL is not defined."
          env_vars_found=false
        fi

        if [[ $env_vars_found == false ]]; then
          echo "Make sure that:"
          echo "a) Permission are set correctly"
          echo "b) The .yml is registered as a trusted publisher"
          echo "See https://github.com/tschm/token-mint-action/blob/main/README.md."
          exit 1
        else
          echo "Required environment variables found!"
        fi

        echo "Fetching OIDC token"
        resp=$(curl -sS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
                           "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${{ inputs.audience }}")

        # extract the token from the response
        oidc_token=$(jq -r '.value' <<< "${resp}")
        echo "OIDC token fetched successfully!"

        echo "Fetching API token"

        # and move the token into json format
        pypi_api_json_payload="{\"token\":\"${oidc_token}\"}"

        # use the OIDC token to request an api token
        resp=$(curl -sS -X POST https://pypi.org/_/oidc/github/mint-token -d "$pypi_api_json_payload")

        # extract the token from the response
        api_token=$(jq -r '.token' <<< "${resp}")
        echo "API token fetched successfully!"

        # mask the newly minted API token, so that we don't accidentally leak it
        echo "::add-mask::${api_token}"

        echo "api-token=$api_token" >> "$GITHUB_OUTPUT"
        echo "API token masked and exported successfully!"

    - name: Build and publish
      run: |
        poetry publish --build -u __token__ -p '${{ steps.tokne_mint.outputs.api-token }}'
